/*
 * Copyright 2014 Terry Mathew Poulin <BigBoss1964@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://maven.google.com"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
    }
}
apply plugin: 'com.android.application'

repositories {
    jcenter()
}

android {
    compileSdkVersion 24
    buildToolsVersion "26.0.1"

    defaultConfig {
        applicationId "com.spidey01.morder.android"
        minSdkVersion 19
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-core-ui:26.0.0'
}


task updateVersionFiles(description: "Update assets/version and assets/branch") {
    // This will give us names like this depending on current state:
    //
    //  tag checked out  => ${name of tag}
    //  head of a branch => ${name-of-tag}-${n commits since tag}-${commit id of head}
    //
    //  '-dirty' will be appended if files are modified and --dirty option given.
    //
    //  Adding --exact-match would make it error in the second case.
    //
    def tagCommand = ['git', 'describe', '--dirty', '--tags']
    def tagName = new ByteArrayOutputStream()
    exec {
        commandLine tagCommand
        standardOutput tagName
    }
    ext.tag = tagName.toString()
    def versionFile = new FileOutputStream(file('src/main/assets/version'))
    tagName.writeTo(versionFile)


    //
    // This will get us the branch name if it exists.
    //
    def branchCommand = ['git', 'symbolic-ref', '--short', '-q', 'HEAD']
    def branchName = new ByteArrayOutputStream()
    exec {
        commandLine branchCommand
        standardOutput branchName
        ignoreExitValue true
    }
    ext.branch = branchName.toString()
    def branchFile = new FileOutputStream(file('src/main/assets/branch'))
    branchName.writeTo(branchFile)

}


task updateBuildInfoFiles(description: "Update assets/buildinfo") {
    file('src/main/assets/buildinfo').newOutputStream().withWriter('UTF-8') { w ->
        def data = [
            'Compiled with': [
                'java.compiler', 'java.home', 'java.vendor', 'java.vendor.url',
                'java.vm.version', 'java.vm.vendor', 'java.vm.name',
                'java.vm.specification.version',
            ],
            'Compiled on':   ['os.name', 'os.version', 'os.arch'],
            'Compiled by':   [
                'user.name', 'user.dir',
                'COMPUTERNAME', 'HOSTNAME'
            ],
        ]

        data.each { section, props ->
            w.append(section).append(': { ').append(System.lineSeparator)
            for (p in props) {
                w.append('\t').append(p).append(':');
                def value = System.getProperty(p)
                if (value == null) {
                    value = System.getenv(p)
                }
                w.append(value)
                w.append(', ').append(System.lineSeparator)
            }
            w.append('}').append(System.lineSeparator)
        }
    }
}


gradle.projectsEvaluated {
    preBuild.dependsOn updateVersionFiles
    preBuild.dependsOn updateBuildInfoFiles

    // If you need to add compiler options like for this warning:
    //
    //      Note: Some input files use or override a deprecated API.
    //      Note: Recompile with -Xlint:deprecation for details.
    //
    // Then uncomment and have at it.
    /*
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
     */
}

